import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import textwrap

TOKEN = "8096361528:AAGifPEXIZ7FrefyI5CzqewRIa-0vuBF1fM"
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

EQUIPMENT = {
    "–ü–∞–ª–∞—Ç–∫–∞ 2-–º–µ—Å—Ç–Ω–∞—è": 400,
    "–®–∞—Ç–µ—Ä-–ø–∞–ª–∞—Ç–∫–∞ 2.4√ó2.4√ó1.7 –º": 900,
    "–°–∞–ø–±–æ—Ä–¥ 3.2√ó76√ó15 (–¥–æ 150 –∫–≥)": 1200,
    "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—É–ª": 250,
}

DEPOSIT = 2000

class OrderState(StatesGroup):
    choosing_item = State()
    entering_days = State()

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    items = "\n".join([f"‚Ä¢ {name} ‚Äî {price}‚ÇΩ/—Å—É—Ç–∫–∏" for name, price in EQUIPMENT.items()])
    await message.answer(
        textwrap.dedent(f"""        üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è.

        üì¶ –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
        {items}

        üí∞ –ó–∞–ª–æ–≥: {DEPOSIT}‚ÇΩ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)

        –ù–∞–ø–∏—à–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å.
        """)
    )
    await state.set_state(OrderState.choosing_item)

@dp.message(OrderState.choosing_item)
async def choose_item(message: Message, state: FSMContext):
    item = message.text.strip()
    if item not in EQUIPMENT:
        return await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(item=item)
    await message.answer("üìÜ –ù–∞ —Å–∫–æ–ª—å–∫–æ —Å—É—Ç–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å?")
    await state.set_state(OrderState.entering_days)

@dp.message(OrderState.entering_days)
async def enter_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—Ç–æ–∫ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")

    data = await state.get_data()
    item = data["item"]
    price_per_day = EQUIPMENT[item]
    total_rent = price_per_day * days
    total = total_rent + DEPOSIT

    await message.answer(
        textwrap.dedent(f"""        ‚úÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>

        üßæ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {item}  
        üìÖ –°—Ä–æ–∫: {days} —Å—É—Ç–æ–∫  
        üíµ –ê—Ä–µ–Ω–¥–∞: {total_rent}‚ÇΩ  
        üí∞ –ó–∞–ª–æ–≥: {DEPOSIT}‚ÇΩ  
        üßÆ <b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>

        –°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!
        """)
    )
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
Pip install aiogram
Python main.py

